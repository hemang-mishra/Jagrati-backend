name: Deploy production
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image (production)
        run: |
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/jagrati:prod
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          

      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: "docker/prod/docker-compose.yml"
          target: "/opt/apps/prod/"

      - name: Deploy production stack via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/apps/production
            docker compose pull
            echo "BASE_URL=${{ secrets.PROD_BASE_URL }}" > .env
            echo "POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.PROD_POSTGRES_USERNAME }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}" >> .env
            echo "JWT_SECRET_BASE_64=${{ secrets.PROD_JWT_SECRET_BASE_64 }}" >> .env
            echo "IMAGE_KIT_PRIVATE_KEY=${{ secrets.PROD_IMAGE_KIT_PRIVATE_KEY }}" >> .env
            echo "OAUTH2_CLIENT_ID=${{ secrets.PROD_OAUTH2_CLIENT_ID }}" >> .env
            echo "GMAIL_PASS=${{ secrets.PROD_GMAIL_PASS }}" >> .env
            echo "ADMIN_MAIL=${{ secrets.PROD_ADMIN_MAIL }}" >> .env
            echo "ADMIN_PASS=${{ secrets.PROD_ADMIN_PASS }}" >> .env
            echo "MAIL_ID=${{ secrets.PROD_MAIL_ID }}" >> .env
            echo "FIREBASE_CREDENTIALS_BASE64=${{ secrets.PROD_FIREBASE_CREDENTIALS_BASE64 }}" >> .env
            
            docker compose up -d
            
            docker compose ps

